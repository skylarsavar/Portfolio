#Processing stage; involves cleaning the data after confirming that it is from a good source and it satisfies the necessary conditions. I chose RStudio as the tool to use 
#for this phase of the analysis process. I started by installing and loading the necessary packages. 

#I started this analysis by importing all of the packages I will need during cleaning and analysis. 
install.packages("tidyverse")
install.packages("lubridate")
install.packages("ggplot2")

library(tidyverse)
library(lubridate)
library(ggplot2)
getwd()

#Step 1 Import the Data: Importing the csv files needed for data analysis with the correct naming conventions.
Q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
Q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
Q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
Q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")

#Step 2 Wrangle the Data: Before combining into one data frame, I confirmed that the data sets include the same column names.
colnames(Q1_2020)
colnames(Q2_2019)
colnames(Q3_2019)
colnames(Q4_2019)

#After reviewing the column names I will be using the rename function to make each file have the same name, making it possible to combine them to one file. I used Q1_2020
#as my template for the other files as the column naming is simpler. 
(Q2_2019 <- rename(Q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID"
                   ,started_at = "01 - Rental Details Local Start Time"
                   ,ended_at = "01 - Rental Details Local End Time"
                   ,start_station_name = "03 - Rental Start Station Name"
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name"
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"))
  
(Q3_2019 <- rename(Q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid
                   ,started_at = start_time
                   ,ended_at = end_time
                   ,start_station_name = from_station_name
                   ,start_station_id = from_station_id
                   ,end_station_name = to_station_name
                   ,end_station_id = to_station_id
                   ,member_casual = usertype))

(Q4_2019 <- rename(Q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid
                   ,started_at = start_time
                   ,ended_at = end_time
                   ,start_station_name = from_station_name
                   ,start_station_id = from_station_id
                   ,end_station_name = to_station_name
                   ,end_station_id = to_station_id
                   ,member_casual = usertype))

#Here I review the data frame using str() function to look for inconsistencies 
str(Q1_2020)
str(Q2_2019)
str(Q3_2019)
str(Q4_2019)

#Rideable_type and ride_id have different data types preventing it from combining. I will use the mutate function to change both rideable_type and ride_id to character type
Q4_2019 <- mutate(Q4_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type))
Q3_2019 <- mutate(Q3_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type))
Q2_2019 <- mutate(Q2_2019, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type))
Q1_2020 <- mutate(Q1_2020, ride_id = as.character(ride_id)
                  ,rideable_type = as.character(rideable_type))

# Using the bind_rows function this will combine them into one data frame
all_trips <- bind_rows(Q1_2020, Q2_2019, Q3_2019, Q4_2019)

# Now that we can combine the tables we need to remove long, birthyear, gender, and lat field as this is not needed for our question.
all_trips <- all_trips %>% 
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,
            "01 - Rental Details Duration In Seconds Uncapped",
              "05 - Member Details Member Birthday Year",
                "Member Gender", "tripduration"))

# Step 3 Clean and add data: Now that we have consolidated the information to all_trips we can start the process of preparing and cleaning the data for analysis.
# The functions used is colnames() to check column names, dim() shows number of rows and columns 
# head() and tail() functions to see the first and last 6 rows as a quick sample. str() to identify and confirm the data types for each column.
# I am also using summary() function to review a small sample of the numerical data.
colnames(all_trips)
nrow(all_trips)
dim(all_trips)
head(all_trips)
str(all_trips)
summary(all_trips)

# There are a few problems we will need to fix:
# (1) In the "member_casual" column, there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual") using mutate function. 
# We will need to consolidate that from four to two labels.
all_trips <- all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "member"
                                ,"Customer" = "casual"))

# Check to make sure the proper number of observations were reassigned 
table(alltrips$member_casual)


# (2) The data can only be aggregated at the ride-level, which is too granular. 
#We will want to add some additional columns of data -- such as day, month, year -- that provide additional opportunities to aggregate the data.
all_trips$date <- as.Date(all_trips$started_at)
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# (3) We will want to add a calculated field for length of ride as ride_length since the 2020Q1 data did not have the "tripduration" column. 
# We will add "ride_length" to the entire dataframe for consistency.
all_trips$ride_length <- difftime(all_trips$ended_at, all_trips$started_at) 

# Check columns to make sure they are the right data type 
str(all_trips)

# ride_length data type as factor but we need as numerical to be homogenous with the rest of the table.
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

# (4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. 
# We will want to delete these rides.
all_trips_v01 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

#Analyze: perform a descriptive analysis fo the data to find patterns between Customer and Subscriber.
#Now that we have the data cleaned and prepped for analysis we can start to analyze the data. I am using the summary function to show the Quantile, Mean, Max, Min and Median
summary(all_trips_v01$ride_length) 
mean(all_trips_v01$ride_length)
median(all_trips_v01$ride_length)
max(all_trips_v01$ride_length)
min(all_trips_v01$ride_length) to verify it is correct
mean = 1479 median = 712  min = 1  max = 9387024

# Goal of analysis is to answer these questions using the data provided
#"How do annual members and casual riders use Cyclistic bikes differently?"
#"Why would casual riders buy Cylistic annual memberships?"
#"How can Cyclistic use digital media to make casual riders into members?"

# Second step is to compare both the members and casual riders. I will start with the aggregate function on both ride_length and member_casual to get Mean,Min,Max and Median
aggregate(all_trips_v01$ride_length ~ all_trips_v01$member_casual, FUN = mean)   casual 3552.7502 member 850.0662
aggregate(all_trips_v01$ride_length ~ all_trips_v01$member_casual, FUN = min)    casual 2 member 1
aggregate(all_trips_v01$ride_length ~ all_trips_v01$member_casual, FUN = max)    casual 9387024 member 9056634
aggregate(all_trips_v01$ride_length ~ all_trips_v01$member_casual, FUN = median) casual 1546 member 589

# To ensure the days show up in the correcr order we will use ordered function so our day is esaier to understand
all_trips_v01$day_of_week <- ordered(all_trips_v01$day_of_week, levels=c("Sunday", "Monday",
        "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Here we use the same aggregate function as before but now we are adding the day_of_week column
# in order to find the Average ride time per each day for members vs casual riders.
aggregate(all_trips_v01$ride_length ~ all_trips_v01$member_casual
          + all_trips_v01$day_of_week, FUN = mean)

# Analyze ridership data by type and weekday (average ride time, by day, and number of trips taken, by each usertype)
# wday() creates weekday field, group_by() groups usertype and weekday, summarize() calculate the number of rides and average duration, mean() calculcates average duration,
# arrange() sorts in ascending order by member_casual and weekday
all_trips_v01 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarize(number_of_rides = n()
  ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual,weekday)

# Visualize the number of rides by rider type 
all_trips_v01 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarize(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual,weekday) %>% 
  ggplot(aes(x=weekday, y=number_of_rides, fill=member_casual)) +
  labs(title = "Total Rides of Members and Casual Riders vs Day of the Week") +
  geom_col(position = "dodge")

# Visualize the average duration by rider type 
all_trips_v01 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarize(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual,weekday) %>% 
  ggplot(aes(x=weekday, y=number_of_rides, fill=member_casual)) +
  labs(title = "Total Rides of Members and Casual Riders vs Day of the Week") +
  geom_col(position = "dodge")

# Number of bike rides by bike type
all_trips_v01 %>% 
  group_by(rideable_type, member_casual) %>% 
  summarize(number_of_rides = n()) %>% 
  ggplot(aes(x=rideable_type, y=number_of_rides, fill=member_casual))+
    geom_col(position = "dodge")+
    labs(title="Number of Rides per Rideable Type", x="Rideable Type", y="Number of Rides") 

# Members vs casual riders difference depending on total rides
 group_by(member_casual) %>% 
  summarise(ride_count = length(ride_id), ride_percentage = (length(ride_id) / nrow(all_trips_v01))*100)

ggplot(all_trips_v01, aes(x=member_casual, fill=member_casual))+
  geom_bar()+
  labs(x="Casuals vs Members", y="Number of Rides", title="Casuals vs Members Distribution")


###Analysis and visualization on cylclistics bike demand by hour in a day
all_trips_v2 %>% 
  ggplot(aes(started_at, fill = member_casual))+
  labs(x = "Hour of the Day", title = "Cyclistic's Bike Demand by Hour in a Day")+
  geom_bar()


## Findings 
Casual rides are more popular on the weekends and for longer periods of time whereas Member rides occur more freqeuently during the week but for much shorter periods of time.
This could indicate that Members use the bikes more for commuting and Casual riders use them for leisurely activities, as we can see an increase in bike rides starting on Friday
and lasting through the weekend. 
